{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","onClick","clickCount","id","alt","name","src","image","Wrapper","children","Header","score","highscore","App","state","cards","gameOver","setState","console","log","this","forEach","card","count","alert","find","o","i","sort","Math","random","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ijEAWeA,G,MARF,SAACC,GAAD,OACZ,yBAAKC,UAAU,OAAOC,QAAS,kBAAMF,EAAMG,WAAWH,EAAMI,MAC3D,yBAAKH,UAAU,iBACd,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,YCDrBC,G,MAFC,SAACT,GAAD,OAAW,yBAAKC,UAAU,WAAWD,EAAMU,YCS5CC,G,MATA,SAACX,GAAD,OACd,yBAAKC,UAAU,UACd,yBAAKA,UAAU,SAASD,EAAMU,UAC9B,yBAAKT,UAAU,UAAf,UACSD,EAAMY,MADf,eACkCZ,EAAMa,c,OCqD3BC,G,kNAnDdC,MAAQ,CACPC,QACAJ,MAAY,EACZC,UAAY,G,EAGbI,SAAW,WAWV,OAVI,EAAKF,MAAMH,MAAQ,EAAKG,MAAMF,WACjC,EAAKK,SAAS,CAAEL,UAAW,EAAKE,MAAMH,QAAS,WAC9CO,QAAQC,IAAIC,KAAKN,MAAMF,cAGzB,EAAKE,MAAMC,MAAMM,SAAQ,SAACC,GACzBA,EAAKC,MAAQ,KAEdC,MAAM,yBAAD,OAA0B,EAAKV,MAAMH,QAC1C,EAAKM,SAAS,CAAEN,MAAO,KAChB,G,EAGRT,WAAa,SAACC,GACb,EAAKW,MAAMC,MAAMU,MAAK,SAACC,EAAGC,GACzB,GAAID,EAAEvB,KAAOA,EAAI,CAChB,GAAuB,IAAnBY,EAAMY,GAAGJ,MAMZ,OALAR,EAAMY,GAAGJ,MAAQR,EAAMY,GAAGJ,MAAQ,EAClC,EAAKN,SAAS,CAAEN,MAAO,EAAKG,MAAMH,MAAQ,IAAK,WAC9CO,QAAQC,IAAIC,KAAKN,MAAMH,UAExB,EAAKG,MAAMC,MAAMa,MAAK,kBAAMC,KAAKC,SAAW,OACrC,EAEP,EAAKd,gB,uDAMC,IAAD,OACR,OACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAQL,MAAOS,KAAKN,MAAMH,MAAOC,UAAWQ,KAAKN,MAAMF,WAAvD,sBAGCQ,KAAKN,MAAMC,MAAMgB,KAAI,SAACT,GAAD,OACrB,kBAAC,EAAD,CAAMpB,WAAY,EAAKA,WAAYC,GAAImB,EAAKnB,GAAI6B,IAAKV,EAAKnB,GAAII,MAAOe,EAAKf,gB,GA9C7D0B,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.acc1acc9.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nconst Card = (props) => (\n\t<div className=\"card\" onClick={() => props.clickCount(props.id)}>\n\t\t<div className=\"img-container\">\n\t\t\t<img alt={props.name} src={props.image} />\n\t\t</div>\n\t</div>\n);\n\nexport default Card;\n","import React from 'react';\nimport './Wrapper.css';\n\nconst Wrapper = (props) => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from 'react';\nimport './Header.css';\n\nconst Header = (props) => (\n\t<div className=\"header\">\n\t\t<div className=\"title\">{props.children}</div>\n\t\t<div className=\"scores\">\n\t\t\tScore: {props.score} Highscore: {props.highscore}\n\t\t</div>\n\t</div>\n);\n\nexport default Header;\n","import React, { Component } from 'react';\nimport Card from './components/Card';\nimport Wrapper from './components/Wrapper';\nimport Header from './components/Header';\nimport cards from './cards.json';\nimport './App.css';\n\nclass App extends Component {\n\t// Setting this.state.cards to the cards json array\n\tstate = {\n\t\tcards,\n\t\tscore     : 0,\n\t\thighscore : 0\n\t};\n\n\tgameOver = () => {\n\t\tif (this.state.score > this.state.highscore) {\n\t\t\tthis.setState({ highscore: this.state.score }, function() {\n\t\t\t\tconsole.log(this.state.highscore);\n\t\t\t});\n\t\t}\n\t\tthis.state.cards.forEach((card) => {\n\t\t\tcard.count = 0;\n\t\t});\n\t\talert(`Game Over :( \\nscore: ${this.state.score}`);\n\t\tthis.setState({ score: 0 });\n\t\treturn true;\n\t};\n\n\tclickCount = (id) => {\n\t\tthis.state.cards.find((o, i) => {\n\t\t\tif (o.id === id) {\n\t\t\t\tif (cards[i].count === 0) {\n\t\t\t\t\tcards[i].count = cards[i].count + 1;\n\t\t\t\t\tthis.setState({ score: this.state.score + 1 }, function() {\n\t\t\t\t\t\tconsole.log(this.state.score);\n\t\t\t\t\t});\n\t\t\t\t\tthis.state.cards.sort(() => Math.random() - 0.5);\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tthis.gameOver();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\t// Map over this.state.cards and render a cardCard component for each card object\n\trender() {\n\t\treturn (\n\t\t\t<Wrapper>\n\t\t\t\t<Header score={this.state.score} highscore={this.state.highscore}>\n\t\t\t\t\tAvatar Memory Game\n\t\t\t\t</Header>\n\t\t\t\t{this.state.cards.map((card) => (\n\t\t\t\t\t<Card clickCount={this.clickCount} id={card.id} key={card.id} image={card.image} />\n\t\t\t\t))}\n\t\t\t</Wrapper>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}